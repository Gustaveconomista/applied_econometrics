# Meu Resultado: Rejection rate (α=0.05): 0.2770  (SE: 0.0142)
# Resultado do Paper:  Rejection rate (α=0.05): 0.117  (SE: 0.010)
# Erro meu ou do autor?


# ================================================
# Monte Carlo: Pairs Cluster Bootstrap-t com SE padrão (OLS)
# ================================================
import numpy as np
import pandas as pd
import statsmodels.api as sm
from numpy.random import default_rng, SeedSequence

# -----------------------------
# Parâmetros
# -----------------------------
G = 5        # número de clusters
NG = 30      # observações por cluster
R = 1000     # replicações Monte Carlo
B = 399      # réplicas bootstrap (pairs)
beta_0 = 0
beta_1 = 1
alpha = 0.05
beta1_H0 = 1.0  # H0: beta_1 = 1

rng = default_rng(42)  # RNG do DGP

# -----------------------------
# DGP
# -----------------------------
def generate_data(G, NG, beta_0=0, beta_1=1):
    zg    = rng.normal(size=G)    # componente comum em x
    eps_g = rng.normal(size=G)    # componente comum no erro

    data_list = []
    for g in range(G):
        zig   = rng.normal(size=NG)   # idiossincrático x
        eps_i = rng.normal(size=NG)   # idiossincrático erro

        xig = zg[g] + zig
        uig = eps_g[g] + eps_i
        yig = beta_0 + beta_1 * xig + uig

        data_list.append(pd.DataFrame({"y": yig, "x": xig, "cluster": g + 1}))
    return pd.concat(data_list, ignore_index=True)

# -----------------------------
# OLS helpers (SE padrão)
# -----------------------------
def _ols_beta_bse_default(df):
    """
    Ajusta y ~ const + x via OLS com SE padrão (homocedástico).
    Retorna (beta[const,x], se[const,x]).
    """
    X = sm.add_constant(df["x"].to_numpy())
    y = df["y"].to_numpy()
    res = sm.OLS(y, X).fit()  # sem cov_type => SE padrão
    beta = np.asarray(res.params, dtype=float)
    se   = np.asarray(res.bse,    dtype=float)
    return beta, se

def ols_beta1_and_default_w(df, beta0):
    """
    w = (beta1_hat - beta0) / se_OLS(beta1_hat), com SE padrão do OLS.
    """
    beta_hat, se_hat = _ols_beta_bse_default(df)
    se_beta1 = float(se_hat[1])
    w = (float(beta_hat[1]) - beta0) / se_beta1
    return float(beta_hat[1]), se_beta1, w

# -----------------------------------------------------
# Pairs cluster bootstrap-t (usando SE padrão em cada réplica)
# -----------------------------------------------------
def pairs_cluster_bootstrap_t_default(df, B=399, alpha=0.05, seed=20240916):
    """
    Retorna (q_low, q_high, wstars) onde
    w*_b = (beta1*_b - beta1_hat) / se_OLS(beta1*_b),
    reamostrando clusters com reposição (pairs) e re-rotulando 1..G.
    """
    cluster_dfs = [g[1] for g in df.groupby("cluster", sort=True)]
    G_here = len(cluster_dfs)

    # âncora: beta1_hat da amostra original
    beta1_hat = float(_ols_beta_bse_default(df)[0][1])

    local_rng = default_rng(seed)
    wstars = np.empty(B, dtype=float)

    for b in range(B):
        sel = local_rng.integers(low=0, high=G_here, size=G_here)  # reamostra clusters
        parts = []
        for j, idx in enumerate(sel):
            tmp = cluster_dfs[idx].copy()
            tmp["cluster"] = j + 1  # re-rotula 1..G
            parts.append(tmp)
        boot_df = pd.concat(parts, ignore_index=True)

        beta_b, se_b = _ols_beta_bse_default(boot_df)
        se1_b = float(se_b[1])
        wstars[b] = (float(beta_b[1]) - beta1_hat) / se1_b

    q_low  = float(np.quantile(wstars, alpha / 2))
    q_high = float(np.quantile(wstars, 1 - alpha / 2))
    return q_low, q_high, wstars

# -----------------------------
# Monte Carlo
# -----------------------------
rej_flags = []
w_orig = []

base_ss_mc = SeedSequence(999)
children_mc = base_ss_mc.spawn(R)

for r in range(R):
    df = generate_data(G, NG)

    # Passo 1: estatística w com SE padrão (OLS)
    beta1_hat, se_ols, w = ols_beta1_and_default_w(df, beta0=beta1_H0)
    w_orig.append(w)

    # Passos 2–3: quantis empíricos de w* (pairs) e decisão
    seed_r = int(children_mc[r].generate_state(1)[0])
    q_low, q_high, _ = pairs_cluster_bootstrap_t_default(
        df, B=B, alpha=alpha, seed=seed_r
    )
    rej_flags.append(int((w < q_low) or (w > q_high)))

# -----------------------------
# Resultados
# -----------------------------
rej_flags = np.array(rej_flags, dtype=int)
rej_rate = rej_flags.mean()
rej_se   = np.sqrt(rej_rate * (1 - rej_rate) / R)

print("==== Monte Carlo: Pairs Cluster Bootstrap-t com SE padrão (OLS) ====")
print(f"Rejection rate (α={alpha:.2f}): {rej_rate:.4f}  (SE: {rej_se:.4f})")
print(f"Média |w (original)|:          {np.mean(np.abs(w_orig)):.4f}")
print(f"B = {B}, R = {R}, G = {G}, NG = {NG}")

